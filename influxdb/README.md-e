<!--

********************************************************************************

WARNING:

    DO NOT EDIT "influxdb/README.md"

    IT IS AUTO-GENERATED

    (from the other files in "influxdb/" combined with a set of templates)

********************************************************************************

-->

# Quick reference

-	**Maintained by**:  
	[InfluxData](%%GITHUB-REPO%%)

-	**Where to get help**:  
	[the Docker Community Slack](https://dockr.ly/comm-slack), [Server Fault](https://serverfault.com/help/on-topic), [Unix & Linux](https://unix.stackexchange.com/help/on-topic), or [Stack Overflow](https://stackoverflow.com/help/on-topic)

# Supported tags and respective `Dockerfile` links

-	[`1.11`, `1.11.8`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.11/Dockerfile)

-	[`1.11-alpine`, `1.11.8-alpine`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.11/alpine/Dockerfile)

-	[`1.10-data`, `1.10.8-data`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.10/data/Dockerfile)

-	[`1.10-data-alpine`, `1.10.8-data-alpine`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.10/data/alpine/Dockerfile)

-	[`1.10-meta`, `1.10.8-meta`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.10/meta/Dockerfile)

-	[`1.10-meta-alpine`, `1.10.8-meta-alpine`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.10/meta/alpine/Dockerfile)

-	[`1.11-data`, `1.11.8-data`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.11/data/Dockerfile)

-	[`1.11-data-alpine`, `1.11.8-data-alpine`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.11/data/alpine/Dockerfile)

-	[`1.11-meta`, `1.11.8-meta`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.11/meta/Dockerfile)

-	[`1.11-meta-alpine`, `1.11.8-meta-alpine`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/1.11/meta/alpine/Dockerfile)

-	[`2`, `2.7`, `2.7.12`, `latest`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/2.7/Dockerfile)

-	[`2-alpine`, `2.7-alpine`, `2.7.12-alpine`, `alpine`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/2.7/alpine/Dockerfile)

-	[`3-core`, `3.2-core`, `3.2.0-core`, `core`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/3.2-core/Dockerfile)

-	[`3-enterprise`, `3.2-enterprise`, `3.2.0-enterprise`, `enterprise`](https://github.com/influxdata/influxdata-docker/blob/abb94994d78be45ccaa56282f36c36ad16bd5a5e/influxdb/3.2-enterprise/Dockerfile)

# Quick reference (cont.)

-	**Where to file issues**:  
	[%%GITHUB-REPO%%/issues](%%GITHUB-REPO%%/issues?q=)

-	**Supported architectures**: ([more info](https://github.com/docker-library/official-images#architectures-other-than-amd64))  
	`amd64`, `arm64v8`

-	**Published image artifact details**:  
	[repo-info repo's `repos/influxdb/` directory](https://github.com/docker-library/repo-info/blob/master/repos/influxdb) ([history](https://github.com/docker-library/repo-info/commits/master/repos/influxdb))  
	(image metadata, transfer size, etc)

-	**Image updates**:  
	[official-images repo's `library/influxdb` label](https://github.com/docker-library/official-images/issues?q=label%3Alibrary%2Finfluxdb)  
	[official-images repo's `library/influxdb` file](https://github.com/docker-library/official-images/blob/master/library/influxdb) ([history](https://github.com/docker-library/official-images/commits/master/library/influxdb))

-	**Source of this description**:  
	[docs repo's `influxdb/` directory](https://github.com/docker-library/docs/tree/master/influxdb) ([history](https://github.com/docker-library/docs/commits/master/influxdb))

**This README covers all currently supported versions of InfluxDB:**

-	**InfluxDB 3** (Core and Enterprise)
-	**InfluxDB v2**
-	**InfluxDB v1**

Scroll to the appropriate section below for Docker setup instructions, configuration flags, and usage examples.

# InfluxDB Docker Image Overview

![logo](https://raw.githubusercontent.com/docker-library/docs/43d87118415bb75d7bb107683e79cd6d69186f67/influxdb/logo.png)

InfluxDB is the time series database platform designed to collect, store, and process large amounts of timestamped data. InfluxDB supports high write and query workloads and is commonly used for:

-	Monitoring infrastructure and applications
-	Collecting data from IoT devices
-	Storing log and event data

InfluxDB offers multiple versions and deployment options to meet diverse technical and operational requirements.

## InfluxDB 3

InfluxDB 3 is a new InfluxDB engine that uses an object store-backed architecture. It stores time series and event data using Apache Arrow and Parquet. It supports high-ingest workloads and fast queries.

InfluxDB 3 comes in two editions:

-	**InfluxDB 3 Core**: A free, open source version of the new engine for local development and prototyping.
-	**InfluxDB 3 Enterprise**: A production-grade, scalable time series database that includes support for clustering, security, and enterprise features.

**License key for Enterprise** To run InfluxDB 3 Enterprise, you need a license key. Obtain one from [InfluxData's pricing page](https://www.influxdata.com/pricing/).

For full documentation, visit the [InfluxDB 3 documentation site](https://docs.influxdata.com)

## Docker Images

Use the official images hosted on Quay.io:

-	**Core:** `quay.io/influxdb/influxdb3:latest`  
-	**Enterprise:** `quay.io/influxdb/influxdb3-enterprise:latest`

## Parameter glossary

| Parameter        | Description                                                     |
|------------------|-----------------------------------------------------------------|
| `--host-id`      | Unique identifier for the InfluxDB Core server node. Required.  |
| `--node-id`      | Unique identifier for the node within an Enterprise cluster.    |
| `--object-store` | Backend storage type for metadata and WAL files (e.g., `file`). |
| `--data-dir`     | Path to the directory for data storage.                         |

# How to use this image

## Start InfluxDB 3 Core

Run InfluxDB 3 Core using either Docker Compose or the CLI.

### Docker Compose

Create a `compose.yml` file with the configuration:

... via [`docker compose`](https://github.com/docker/compose)

Example `compose.yaml` for `influxdb`:

```yaml
# compose.yaml
services:
  influxdb3-core:
    container_name: influxdb3-core
    image: influxdb:3-core
    ports:
      - 8181:8181
    command:
      - influxdb3
      - serve
      - --node-id=node0
      - --object-store=file
      - --data-dir=/var/lib/influxdb3
      - --plugin-dir=/var/lib/influxdb3-plugins
```

Start the container by using the following command:

```bash
docker compose pull && docker compose run influxdb3-core
```

Stop your container by using following command:

```bash
docker container ls --filter "name=influxdb3"
docker kill <CONTAINER_ID>
```

### Docker CLI

Run this command to start the InfluxDB 3 Core container:

```bash
docker run -d --name influxdb3-core \
  -p 8086:8086 \
  quay.io/influxdb/influxdb3:latest \
  serve --host-id my-influxdb-node --object-store file --data-dir /var/lib/influxdb3
```

Once the container is running, generate an admin token:

```bash
docker exec -it influxdb3-core influxdb3 generate token --admin
```

Use the token to create a database:

```bash
docker exec -it influxdb3-core influxdb3 create database my_db --token YOUR_ADMIN_TOKEN
```

To check the server health:

```bash
curl localhost:8086/health
```

## Start InfluxDB 3 Enterprise

InfluxDB 3 Enterprise supports clustered deployments and advanced features. To start a local standalone Enterprise container for testing, provide your license key as an environment variable.

### Docker Compose

Create a `compose.yml` file with the following configuration:

... via [`docker compose`](https://github.com/docker/compose)

Example `compose.yaml` for `influxdb`:

```yaml
# compose.yaml
services:
  influxdb3-core:
    container_name: influxdb3-core
    image: influxdb:3-core
    ports:
      - 8181:8181
    command:
      - influxdb3
      - serve
      - --node-id=node0
      - --object-store=file
      - --data-dir=/var/lib/influxdb3
      - --plugin-dir=/var/lib/influxdb3-plugins
```

Start your container:

```bash
docker compose pull && docker compose run influxdb3-enterprise
```

## Docker with mounted file style object store

Run this command to start the InfluxDB 3 Enterprise container

```bash
docker run -d --name influxdb3-enterprise -p 8086:8086 \
  -v $PWD/plugins:/plugins \
  -v $PWD/data:/var/lib/influxdb3 \
  -e INFLUX_LICENSE_KEY="YOUR_LICENSE_KEY" \
  influxdb:enterprise serve \
    --cluster-id cluster1 \
    --node-id node1 \
    --plugin-dir /plugins \
    --object-store file \
    --data-dir /var/lib/influxdb3
```

Then, generate an admin token:

```bash
docker exec -it influxdb3-enterprise influxdb3 create token --admin
```

Use the token from the output to create a database.

```bash
docker exec -it influxdb3-enterprise influxdb3 create database enterprise_db --token <your_admin_token>
```

## Mount data to persist across restarts

To retain data across container restarts, mount a Docker volume or bind a local directory. Be sure to include the required `serve` command and storage configuration.

### Using a Docker volume

To persist data using a Docker-managed volume, run the following command:

```bash
docker run -d --name influxdb3-core \
  -v influxdb3-data:/var/lib/influxdb3 \
  -p 8086:8086 \
  quay.io/influxdb/influxdb3:latest \
  serve --host-id my-influxdb-node --object-store file --data-dir /var/lib/influxdb3
```

This command:

-	Creates or reuses a Docker volume named `influxdb3-data`.
-	Maps the default InfluxDB port (`8086`) to your local machine.
-	Starts the InfluxDB server with a required host ID and object store configuration.

### Using a local host directory

To persist data in a local directory on your host, use the following command:

```bash
docker run -d --name influxdb3-core \
  -v $PWD/influxdb3-data:/var/lib/influxdb3 \
  -p 8086:8086 \
  quay.io/influxdb/influxdb3:latest \
  serve --host-id my-influxdb-node --object-store file --data-dir /var/lib/influxdb3
```

This mounts a local folder named `influxdb3-data` in your current working directory. Ensure that this directory exists and has appropriate write permissions.

# InfluxDB v2

## How to use the InfluxDB v2 Docker image

Use the official [InfluxDB v2 Docker image](https://hub.docker.com/_/influxdb) to start an instance for development or testing.

```bash
docker run -d -p 8086:8086 \
  -v $PWD/data:/var/lib/influxdb2 \
  -v $PWD/config:/etc/influxdb2 \
  -e DOCKER_INFLUXDB_INIT_MODE=setup \
  -e DOCKER_INFLUXDB_INIT_USERNAME=my-user \
  -e DOCKER_INFLUXDB_INIT_PASSWORD=my-password \
  -e DOCKER_INFLUXDB_INIT_ORG=my-org \
  -e DOCKER_INFLUXDB_INIT_BUCKET=my-bucket \
  influxdb:2
```

After the container starts, go to `http://localhost:8086` to access the UI.

For more information, see the [InfluxDB v2 Docker documentation](https://docs.influxdata.com/influxdb/v2/install/?t=docker).

# InfluxDB v1

## How to use the InfluxDB v1 Docker image

Use the official [InfluxDB v1 Docker image](https://hub.docker.com/_/influxdb) to start a basic instance for development or testing:

```bash
docker run -d -p 8086:8086 \
  -v $PWD:/var/lib/influxdb \
  influxdb:1.8
```

This command maps port `8086` and mounts your current directory to persist data.

For more information, see the [InfluxDB v1 Docker documentation](https://docs.influxdata.com/influxdb/v1/).

# Image Variants

The `influxdb` images come in many flavors, each designed for a specific use case.

## `influxdb:<version>`

This is the defacto image. If you are unsure about what your needs are, you probably want to use this one. It is designed to be used both as a throw away container (mount your source code and start the container to start your app), as well as the base to build other images off of.

## `influxdb:<version>-alpine`

This image is based on the popular [Alpine Linux project](https://alpinelinux.org), available in [the `alpine` official image](https://hub.docker.com/_/alpine). Alpine Linux is much smaller than most distribution base images (~5MB), and thus leads to much slimmer images in general.

This variant is useful when final image size being as small as possible is your primary concern. The main caveat to note is that it does use [musl libc](https://musl.libc.org) instead of [glibc and friends](https://www.etalabs.net/compare_libcs.html), so software will often run into issues depending on the depth of their libc requirements/assumptions. See [this Hacker News comment thread](https://news.ycombinator.com/item?id=10782897) for more discussion of the issues that might arise and some pro/con comparisons of using Alpine-based images.

To minimize image size, it's uncommon for additional related tools (such as `git` or `bash`) to be included in Alpine-based images. Using this image as a base, add the things you need in your own Dockerfile (see the [`alpine` image description](https://hub.docker.com/_/alpine/) for examples of how to install packages if you are unfamiliar).

## `influxdb:data`

*Using this image for [InfluxDB Enterprise](https://docs.influxdata.com/enterprise_influxdb/v1/introduction/installation/meta_node_installation/#license-key-or-file) requires a valid InfluxData [license key](https://docs.influxdata.com/enterprise_influxdb/v1/introduction/installation/meta_node_installation/#license-key-or-file).*

This image contains the enterprise data node package for clustering. It supports all of the same options as the InfluxDB 1.x OSS image, but it needs port 8088 to be exposed to the meta nodes.

Refer to the `influxdb:meta` variant for directions on how to setup a cluster.

## `influxdb:meta`

*This image requires a valid license key from InfluxData.* Please visit our [products page](https://www.influxdata.com/products/) to learn more.

This image contains the enterprise meta node package for clustering. It is meant to be used in conjunction with the `influxdb:data` package of the same version.

### Using this Image

#### Specifying the license key

The license key can be specified using either an environment variable or by overriding the configuration file. If you specify the license key directly, the container needs to be able to access the InfluxData portal.

```console
docker run -p 8089:8089 -p 8091:8091 \
      -e INFLUXDB_ENTERPRISE_LICENSE_KEY=<license-key>
      influxdb:meta
```

#### Running the container

The examples below will use docker's built-in networking capability. If you use the port exposing feature, the host port and the container port need to be the same.

First, create a docker network:

```console
docker network create influxdb
```

Start three meta nodes. This is the suggested number of meta nodes. We do not recommend running more or less. If you choose to run more or less, be sure that the number of meta nodes is odd. The hostname must be set on each container to the address that will be used to access the meta node. When using docker networks, the hostname should be made the same as the name of the container.

```console
docker run -d --name=influxdb-meta-0 --network=influxdb \
      -h influxdb-meta-0 \
      -e INFLUXDB_ENTERPRISE_LICENSE_KEY=<license-key> \
      influxdb:meta
docker run -d --name=influxdb-meta-1 --network=influxdb \
      -h influxdb-meta-1 \
      -e INFLUXDB_ENTERPRISE_LICENSE_KEY=<license-key> \
      influxdb:meta
docker run -d --name=influxdb-meta-2 --network=influxdb \
      -h influxdb-meta-2 \
      -e INFLUXDB_ENTERPRISE_LICENSE_KEY=<license-key> \
      influxdb:meta
```

When setting the hostname, you can use `-h <hostname>` or you can directly set the environment variable using `-e INFLUXDB_HOSTNAME=<hostname>`.

After starting the meta nodes, you need to tell them about each other. Choose one of the meta nodes and run `influxd-ctl` in the container.

```console
docker exec influxdb-meta-0 \
      influxd-ctl add-meta influxdb-meta-1:8091
docker exec influxdb-meta-0 \
      influxd-ctl add-meta influxdb-meta-2:8091
```

Or you can just start a single meta node. If you setup a single meta node, you do not need to use `influxd-ctl add-meta`.

```console
docker run -d --name=influxdb-meta --network=influxdb \
      -h influxdb-meta \
      -e INFLUXDB_ENTERPRISE_LICENSE_KEY=<license-key> \
      influxdb:meta -single-server
```

#### Connecting the data nodes

Start the data nodes using `influxdb:data` with similar command line arguments to the meta nodes. You can start as many data nodes as are allowed by your license.

```console
docker run -d --name=influxdb-data-0 --network=influxdb \
      -h influxdb-data-0 \
      -e INFLUXDB_LICENSE_KEY=<license-key> \
      influxdb:data
```

You can add `-p 8086:8086` to expose the http port to the host machine. After starting the container, choose one of the meta nodes and add the data node to it.

```console
docker exec influxdb-meta-0 \
      influxd-ctl add-data influxdb-data-0:8088
```

Perform these same steps for any other data nodes that you want to add.

You can now connect to any of the running data nodes to use your cluster.

See the [influxdb](https://hub.docker.com/_/influxdb/) image documentation for more details on how to use the data node images.

#### Configuration

InfluxDB Meta can be either configured from a config file or using environment variables. To mount a configuration file and use it with the server, you can use this command:

Generate the default configuration file:

```console
docker run --rm influxdb:meta influxd-meta config > influxdb-meta.conf
```

Modify the default configuration, which will now be available under `$PWD`. Then start the InfluxDB Meta container.

```console
docker run \
      -v $PWD/influxdb-meta.conf:/etc/influxdb/influxdb-meta.conf:ro \
      influxdb -config /etc/influxdb/influxdb-meta.conf
```

Modify `$PWD` to the directory where you want to store the configuration file.

For environment variables, the format is `INFLUXDB_$SECTION_$NAME`. All dashes (`-`) are replaced with underscores (`_`). If the variable isn't in a section, then omit that part.

Examples:

```console
INFLUXDB_REPORTING_DISABLED=true
INFLUXDB_META_DIR=/path/to/metadir
INFLUXDB_ENTERPRISE_REGISTRATION_ENABLED=true
```

For more information, see how to [Install InfluxDB Enterprise meta nodes](https://docs.influxdata.com/enterprise_influxdb/v1/introduction/installation/meta_node_installation/).

# License

View [license information](https://github.com/influxdata/influxdb/blob/master/LICENSE) for the software contained in this image.

As with all Docker images, these likely also contain other software which may be under other licenses (such as Bash, etc from the base distribution, along with any direct or indirect dependencies of the primary software being contained).

Some additional license information which was able to be auto-detected might be found in [the `repo-info` repository's `influxdb/` directory](https://github.com/docker-library/repo-info/tree/master/repos/influxdb).

As for any pre-built image usage, it is the image user's responsibility to ensure that any use of this image complies with any relevant licenses for all software contained within.
